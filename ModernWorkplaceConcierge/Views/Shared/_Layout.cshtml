<!-- Copyright (c) Microsoft Corporation. All rights reserved.
     Licensed under the MIT License. -->

@{
    var alerts = TempData.ContainsKey(ModernWorkplaceConcierge.Models.Alert.AlertKey) ?
        (List<ModernWorkplaceConcierge.Models.Alert>)TempData[ModernWorkplaceConcierge.Models.Alert.AlertKey] :
        new List<ModernWorkplaceConcierge.Models.Alert>();

    var messages = TempData.ContainsKey(ModernWorkplaceConcierge.Models.Info.SessKey) ?
        (List<ModernWorkplaceConcierge.Models.Info>)TempData[ModernWorkplaceConcierge.Models.Info.SessKey] :
        new List<ModernWorkplaceConcierge.Models.Info>();
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Workplace Concierge</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.1.0/css/all.css"
          integrity="sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt"
          crossorigin="anonymous">

    <link rel="stylesheet" href="~/Content/Site.css" />

    <script src="~/Scripts/jquery-3.4.1.min.js"></script>

    <script type="text/javascript">
        var sdkInstance = "appInsightsSDK"; window[sdkInstance] = "appInsights"; var aiName = window[sdkInstance], aisdk = window[aiName] || function (e) { function n(e) { t[e] = function () { var n = arguments; t.queue.push(function () { t[e].apply(t, n) }) } } var t = { config: e }; t.initialize = !0; var i = document, a = window; setTimeout(function () { var n = i.createElement("script"); n.src = e.url || "https://az416426.vo.msecnd.net/scripts/b/ai.2.min.js", i.getElementsByTagName("script")[0].parentNode.appendChild(n) }); try { t.cookie = i.cookie } catch (e) { } t.queue = [], t.version = 2; for (var r = ["Event", "PageView", "Exception", "Trace", "DependencyData", "Metric", "PageViewPerformance"]; r.length;)n("track" + r.pop()); n("startTrackPage"), n("stopTrackPage"); var s = "Track" + r[0]; if (n("start" + s), n("stop" + s), n("addTelemetryInitializer"), n("setAuthenticatedUserContext"), n("clearAuthenticatedUserContext"), n("flush"), t.SeverityLevel = { Verbose: 0, Information: 1, Warning: 2, Error: 3, Critical: 4 }, !(!0 === e.disableExceptionTracking || e.extensionConfig && e.extensionConfig.ApplicationInsightsAnalytics && !0 === e.extensionConfig.ApplicationInsightsAnalytics.disableExceptionTracking)) { n("_" + (r = "onerror")); var o = a[r]; a[r] = function (e, n, i, a, s) { var c = o && o(e, n, i, a, s); return !0 !== c && t["_" + r]({ message: e, url: n, lineNumber: i, columnNumber: a, error: s }), c }, e.autoExceptionInstrumented = !0 } return t }(
            {
                instrumentationKey: "d3883943-ec8d-4937-bbe4-9c9ef46653c5"
            }
        ); window[aiName] = aisdk, aisdk.queue && 0 === aisdk.queue.length && aisdk.trackPageView({});
    </script>
</head>

<body>
    <nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
        <div class="container">
            @Html.ActionLink("Modern Workplace Concierge", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarCollapse"
                    aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <ul class="navbar-nav mr-auto">
                    <li class="nav-item">
                        @Html.ActionLink("Home", "Index", "Home", new { area = "" },
                            new { @class = ViewBag.Current == "Home" ? "nav-link active" : "nav-link" })
                    </li>
                    @if (Request.IsAuthenticated)
                    {
                        <li class="nav-item dropdown">
                            <a class="dropdown-toggle @((ViewBag.Current.StartsWith("Intune") ? "nav-link active" : "nav-link"))" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Intune</a>
                            <div class="dropdown-menu dropdown-menu-right">
                                @Html.ActionLink("Export", "Index", "Intune", new { area = "" },
                                new { @class = ViewBag.Current == "IntuneExport" ? "dropdown-item active" : "dropdown-item" })

                                @Html.ActionLink("Import", "Import", "Intune", new { area = "" },
                               new { @class = ViewBag.Current == "IntuneImport" ? "dropdown-item active" : "dropdown-item" })

                                @Html.ActionLink("DeviceManagementScripts", "DeviceManagementScripts", "Intune", new { area = "" },
                                new { @class = ViewBag.Current == "IntuneDeviceManagementScripts" ? "dropdown-item active" : "dropdown-item" })

                                @Html.ActionLink("AutoPilotConfiguration", "Index", "AutoPilotConfiguration", new { area = "" },
                               new { @class = ViewBag.Current == "IntuneAutoPilotConfiguration" ? "dropdown-item active" : "dropdown-item" })

                                @Html.ActionLink("Custom Roles", "Roles", "Intune", new { area = "" },
                               new { @class = ViewBag.Current == "IntuneRoles" ? "dropdown-item active" : "dropdown-item" })
                            </div>
                        </li>

                        <li class="nav-item dropdown">
                            <a class="dropdown-toggle @((ViewBag.Current.StartsWith("ConditionalAccess")  ? "nav-link active" : "nav-link"))" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">ConditionalAccess</a>
                            <div class="dropdown-menu dropdown-menu-right">
                                @Html.ActionLink("Export", "Index", "ConditionalAccess", new { area = "" },
                                new { @class = ViewBag.Current == "ConditionalAccessExport" ? "dropdown-item active" : "dropdown-item" })

                                @Html.ActionLink("Import", "Import", "ConditionalAccess", new { area = "" },
                               new { @class = ViewBag.Current == "ConditionalAccessImport" ? "dropdown-item active" : "dropdown-item" })
                            </div>
                        </li>

                        <li class="nav-item dropdown">
                            <a class="dropdown-toggle @((ViewBag.Current.StartsWith("Planner")  ? "nav-link active" : "nav-link"))" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">Office 365</a>
                            <div class="dropdown-menu dropdown-menu-right">
                                @Html.ActionLink("Import Planner Tasks", "Index", "Planner", new { area = "" },
                                new { @class = ViewBag.Current == "PlannerImport" ? "dropdown-item active" : "dropdown-item" })

                            </div>
                        </li>
                    }
                </ul>
                <ul class="navbar-nav justify-content-end">
                    <li class="nav-item">
                        <a href="https://github.com/nicolonsky/ModernWorkplaceConcierge/wiki" target="_blank" class="nav-link">
                            <i class="fas fa-book"></i>
                            <span>Documentation</span>
                        </a>
                    </li>
                    @if (Request.IsAuthenticated)
                    {
                        <li class="nav-item dropdown">
                            <a class="nav-link" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
                                @if (!string.IsNullOrEmpty(ViewBag.User.Avatar))
                                {
                                    <img src="@ViewBag.User.Avatar" class="rounded-circle align-self-center mr-2" style="width: 32px;">
                                }
                                else
                                {
                                    <i class="far fa-user-circle fa-lg rounded-circle align-self-center mr-2" style="width: 32px;"></i>
                                }
                            </a>
                            <div class="dropdown-menu dropdown-menu-right">
                                <h5 class="dropdown-item-text mb-0">@ViewBag.User.DisplayName</h5>
                                <p class="dropdown-item-text text-muted mb-0">@ViewBag.User.Email</p>
                                <p class="dropdown-item-text text-muted mb-0">Build: @typeof(ModernWorkplaceConcierge.BundleConfig).Assembly.GetName().Version</p>
                                <div class="dropdown-divider"></div>
                                @Html.ActionLink("Sign Out", "SignOut", "Account", new { area = "" }, new { @class = "dropdown-item" })
                            </div>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            @Html.ActionLink("Sign In", "SignIn", "Account", new { area = "" }, new { @class = "nav-link" })
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>
    <main role="main" class="container overflow-auto">

        @RenderBody()

        @foreach (var alert in alerts)
        {

            <div class="alert alert-danger alert-dismissible" role="alert">
                <p class="mb-3">@alert.Message</p>
                @if (!string.IsNullOrEmpty(alert.Debug))
                {
                    <pre class="alert-pre border bg-light p-2"><code>@alert.Debug</code></pre>
                }
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }

        @foreach (var message in messages)
        {

            <div class="alert alert-success alert-dismissible" role="alert">
                <p class="mb-3">@message.Message</p>
                @if (!string.IsNullOrEmpty(message.Debug))
                {
                    <pre class="alert-pre border bg-light p-2"><code>@message.Debug</code></pre>
                }
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }

        <div class="container">
            <ul class="list-group" id="messages">
            </ul>
        </div>
    </main>


    <br />
    <br />
    <footer class="footer mt-auto fixed-bottom py-2">
        <div class="container">
            <span class="">Instance: <span class="badge badge-secondary">@System.Configuration.ConfigurationManager.AppSettings["InstanceType"].ToString()</span></span>
            <span class="float-md-right text-nowrap">Presented by Nicola Suter</span>
        </div>
    </footer>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>